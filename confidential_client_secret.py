import msal
import json
import logging
import os
from dotenv import load_dotenv


def msal_credential_token(client_id:str,authority:str, scope:list[str],client_credential:str):
    """
    {
    "note": "You configure either the authority setting when you are using Entra ID or External ID, or the oidc_authority setting when you are using External ID with its custom domain. Change the other one to null",
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "oidc_authority": "https://login.contoso.com/Enter_the_Tenant_Name_Here/v2.0",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
    // For more information about scopes for an app, refer:
    // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
    // For information about generating client secret, refer:
   // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"
    }
    :return:
    https://github.com/Azure-Samples/ms-identity-python-daemon/tree/master/1-Call-MsGraph-WithSecret
    """

    # Create a preferably long-lived app instance which maintains a token cache.
    app = msal.ConfidentialClientApplication(
        client_id = client_id,
        authority=authority,  # For Entra ID or External ID,
        client_credential= client_credential
        )

    # The pattern to acquire a token looks like this.
    result = None

    # Firstly, looks up a token from cache
    # Since we are looking for token for the current app, NOT for an end user,
    # notice we give account parameter as None.
    result = app.acquire_token_silent(scopes=scope, account=None)

    if not result:
        logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
        result = app.acquire_token_for_client(scopes=scope)

    if "access_token" in result:

        return result['access_token']

def main():
    """To test the code"""
    load_dotenv()
    tenant_id = os.getenv('AZURE_TENANT_ID')
    client_id = os.getenv('AZURE_CLIENT_ID')
    client_secret = os.getenv('AZURE_CLIENT_SECRET')
    authority = f'https://login.microsoftonline.com/{tenant_id}'
    scope = ["https://graph.microsoft.com/.default"]

    access_token = msal_credential_token(client_id=client_id, client_credential=client_secret,authority=authority, scope=scope)

if __name__ =="__main__":
    main()